#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len ints to dst.
# Return the number of positive ints (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
# 
# unroll by factor 4
##################################################################
# Do not modify this portion
# Function prologue.
ncopy:	pushl %ebp		# Save old frame pointer
	rrmovl %esp,%ebp	# Set up new frame pointer
	pushl %esi		# Save callee-save regs
	pushl %ebx
	pushl %edi
	mrmovl 8(%ebp),%ebx	# src
	mrmovl 16(%ebp),%edx	# len
	mrmovl 12(%ebp),%ecx	# dst

##################################################################
# You can modify this portion
	# Loop header
	xorl %eax,%eax		# count = 0;
	andl %edx,%edx		# len <= 0?
	jle Done		    # if so, goto Done:
    	iaddl $-4, %edx     	#len = len - 4
    	jl Len_recover

Loop:
	mrmovl (%ebx), %esi	# val = src[0]
	mrmovl 4(%ebx),%edi 	# tmp = src[1]
	rmmovl %esi, (%ecx)	# dest[0] = src[0]
	andl %esi, %esi		# val <= 0?
	jle pos1		# if so, goto pos1:
	iaddl $1, %eax      	# count++

pos1:
	rmmovl %edi, 4(%ecx)	# dest[1] = tmp
	andl %edi, %edi     	# tmp <=0 ?
	jle pos2
	iaddl $1, %eax      	# count++

pos2:
	mrmovl 8(%ebx), %esi	# val = src[2]
	mrmovl 12(%ebx),%edi 	# tmp = src[3]
	rmmovl %esi, 8(%ecx)    # dest[2] = src[2]
	andl %esi, %esi		# val <= 0?
	jle pos3		# if so, goto pos3
	iaddl $1, %eax		# count++

pos3:
	rmmovl %edi, 12(%ecx)   # dest[3] = tmp
	andl  %edi, %edi     	# tmp <=0 ?
	jle   reloop
	iaddl $1, %eax          # count++

reloop:
	iaddl  $16, %ebx	# shift ebx by 4
	iaddl  $16, %ecx	# shift ecx by 4
	iaddl $-4, %edx     	# len = len - 4
	jge   Loop

Len_recover:
	iaddl $4, %edx      	#len = len + 4

res1:
	iaddl $-1, %edx
	jl Done
	mrmovl (%ebx), %esi	# val = src[0]
	mrmovl 4(%ebx),%edi 	# tmp = src[1]
	rmmovl %esi, (%ecx)	# dest[0] = src[0]
	andl %esi, %esi		# val <= 0?
	jle res2		# if so, goto pos1:
	iaddl $1, %eax      	# count++
res2:
	iaddl $-1, %edx
	jl Done
	rmmovl %edi, 4(%ecx)	# dest[1] = tmp
	andl %edi, %edi     	# tmp <=0 ?
	jle res3
	iaddl $1, %eax      	# count++
res3:
	iaddl $-1, %edx
	jl Done
	mrmovl 8(%ebx), %esi	# val = src[2]
	rmmovl %esi, 8(%ecx)    # dest[2] = src[2]
	andl %esi, %esi		# val <= 0?
	jle Done		# if so, goto pos3
	iaddl $1, %eax		# count++

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
	popl %edi               # Restore callee-save registers
	popl %ebx
	popl %esi
	rrmovl %ebp, %esp
	popl %ebp
	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
