                      | #######################################################################
                      | # Test for copying block of size 63;
                      | #######################################################################
  0x000:              | 	.pos 0
  0x000: 30f4a4030000 | main:	irmovl Stack, %esp  	# Set up stack pointer
  0x006: 30f5a4030000 | 	irmovl Stack, %ebp  	# Set up base pointer
                      | 
                      | 	# Set up arguments for copy function and then invoke it
  0x00c: 30f03f000000 | 	irmovl $63, %eax		# src and dst have 63 elements
  0x012: a00f         | 	pushl %eax
  0x014: 30f064020000 | 	irmovl dest, %eax	# dst array
  0x01a: a00f         | 	pushl %eax
  0x01c: 30f054010000 | 	irmovl src, %eax	# src array
  0x022: a00f         | 	pushl %eax
  0x024: 802a000000   | 	call ncopy		 
  0x029: 00           | 	halt			# should halt with num nonzeros in %eax
  0x02a:              | StartFun:
                      | #/* $begin ncopy-ys */
                      | ##################################################################
                      | # ncopy.ys - Copy a src block of len ints to dst.
                      | # Return the number of positive ints (>0) contained in src.
                      | #
                      | # Include your name and ID here.
                      | #
                      | # Describe how and why you modified the baseline code.
                      | # 
                      | # unroll by factor 4
                      | ##################################################################
                      | # Do not modify this portion
                      | # Function prologue.
  0x02a: a05f         | ncopy:	pushl %ebp		# Save old frame pointer
  0x02c: 2045         | 	rrmovl %esp,%ebp	# Set up new frame pointer
  0x02e: a06f         | 	pushl %esi		# Save callee-save regs
  0x030: a03f         | 	pushl %ebx
  0x032: a07f         | 	pushl %edi
  0x034: 503508000000 | 	mrmovl 8(%ebp),%ebx	# src
  0x03a: 502510000000 | 	mrmovl 16(%ebp),%edx	# len
  0x040: 50150c000000 | 	mrmovl 12(%ebp),%ecx	# dst
                      | 
                      | ##################################################################
                      | # You can modify this portion
                      | 	# Loop header
  0x046: 6300         | 	xorl %eax,%eax		# count = 0;
  0x048: 6222         | 	andl %edx,%edx		# len <= 0?
  0x04a: 7147010000   | 	jle Done		    # if so, goto Done:
  0x04f: c0f2fcffffff |     	iaddl $-4, %edx     	#len = len - 4
  0x055: 72d5000000   |     	jl Len_recover
                      | 
  0x05a:              | Loop:
  0x05a: 506300000000 | 	mrmovl (%ebx), %esi	# val = src[0]
  0x060: 507304000000 | 	mrmovl 4(%ebx),%edi 	# tmp = src[1]
  0x066: 406100000000 | 	rmmovl %esi, (%ecx)	# dest[0] = src[0]
  0x06c: 6266         | 	andl %esi, %esi		# val <= 0?
  0x06e: 7179000000   | 	jle pos1		# if so, goto pos1:
  0x073: c0f001000000 | 	iaddl $1, %eax      	# count++
                      | 
  0x079:              | pos1:
  0x079: 407104000000 | 	rmmovl %edi, 4(%ecx)	# dest[1] = tmp
  0x07f: 6277         | 	andl %edi, %edi     	# tmp <=0 ?
  0x081: 718c000000   | 	jle pos2
  0x086: c0f001000000 | 	iaddl $1, %eax      	# count++
                      | 
  0x08c:              | pos2:
  0x08c: 506308000000 | 	mrmovl 8(%ebx), %esi	# val = src[2]
  0x092: 50730c000000 | 	mrmovl 12(%ebx),%edi 	# tmp = src[3]
  0x098: 406108000000 | 	rmmovl %esi, 8(%ecx)    # dest[2] = src[2]
  0x09e: 6266         | 	andl %esi, %esi		# val <= 0?
  0x0a0: 71ab000000   | 	jle pos3		# if so, goto pos3
  0x0a5: c0f001000000 | 	iaddl $1, %eax		# count++
                      | 
  0x0ab:              | pos3:
  0x0ab: 40710c000000 | 	rmmovl %edi, 12(%ecx)   # dest[3] = tmp
  0x0b1: 6277         | 	andl  %edi, %edi     	# tmp <=0 ?
  0x0b3: 71be000000   | 	jle   reloop
  0x0b8: c0f001000000 | 	iaddl $1, %eax          # count++
                      | 
  0x0be:              | reloop:
  0x0be: c0f310000000 | 	iaddl  $16, %ebx	# shift ebx by 4
  0x0c4: c0f110000000 | 	iaddl  $16, %ecx	# shift ecx by 4
  0x0ca: c0f2fcffffff | 	iaddl $-4, %edx     	# len = len - 4
  0x0d0: 755a000000   | 	jge   Loop
                      | 
  0x0d5:              | Len_recover:
  0x0d5: c0f204000000 | 	iaddl $4, %edx      	#len = len + 4
                      | 
  0x0db:              | res1:
  0x0db: c0f2ffffffff | 	iaddl $-1, %edx
  0x0e1: 7247010000   | 	jl Done
  0x0e6: 506300000000 | 	mrmovl (%ebx), %esi	# val = src[0]
  0x0ec: 507304000000 | 	mrmovl 4(%ebx),%edi 	# tmp = src[1]
  0x0f2: 406100000000 | 	rmmovl %esi, (%ecx)	# dest[0] = src[0]
  0x0f8: 6266         | 	andl %esi, %esi		# val <= 0?
  0x0fa: 7105010000   | 	jle res2		# if so, goto pos1:
  0x0ff: c0f001000000 | 	iaddl $1, %eax      	# count++
  0x105:              | res2:
  0x105: c0f2ffffffff | 	iaddl $-1, %edx
  0x10b: 7247010000   | 	jl Done
  0x110: 407104000000 | 	rmmovl %edi, 4(%ecx)	# dest[1] = tmp
  0x116: 6277         | 	andl %edi, %edi     	# tmp <=0 ?
  0x118: 7123010000   | 	jle res3
  0x11d: c0f001000000 | 	iaddl $1, %eax      	# count++
  0x123:              | res3:
  0x123: c0f2ffffffff | 	iaddl $-1, %edx
  0x129: 7247010000   | 	jl Done
  0x12e: 506308000000 | 	mrmovl 8(%ebx), %esi	# val = src[2]
  0x134: 406108000000 | 	rmmovl %esi, 8(%ecx)    # dest[2] = src[2]
  0x13a: 6266         | 	andl %esi, %esi		# val <= 0?
  0x13c: 7147010000   | 	jle Done		# if so, goto pos3
  0x141: c0f001000000 | 	iaddl $1, %eax		# count++
                      | 
                      | ##################################################################
                      | # Do not modify the following section of code
                      | # Function epilogue.
  0x147:              | Done:
  0x147: b07f         | 	popl %edi               # Restore callee-save registers
  0x149: b03f         | 	popl %ebx
  0x14b: b06f         | 	popl %esi
  0x14d: 2054         | 	rrmovl %ebp, %esp
  0x14f: b05f         | 	popl %ebp
  0x151: 90           | 	ret
                      | ##################################################################
                      | # Keep the following label at the end of your function
  0x152:              | End:
                      | #/* $end ncopy-ys */
  0x152:              | EndFun:
                      | 
                      | ###############################
                      | # Source and destination blocks 
                      | ###############################
<<<<<<< HEAD
  0x154:              | 	.align 4
  0x154:              | src:
  0x154: 01000000     | 	.long 1
  0x158: 02000000     | 	.long 2
  0x15c: 03000000     | 	.long 3
  0x160: fcffffff     | 	.long -4
  0x164: 05000000     | 	.long 5
  0x168: faffffff     | 	.long -6
  0x16c: 07000000     | 	.long 7
  0x170: f8ffffff     | 	.long -8
  0x174: f7ffffff     | 	.long -9
  0x178: 0a000000     | 	.long 10
  0x17c: 0b000000     | 	.long 11
  0x180: f4ffffff     | 	.long -12
  0x184: f3ffffff     | 	.long -13
  0x188: 0e000000     | 	.long 14
  0x18c: f1ffffff     | 	.long -15
  0x190: f0ffffff     | 	.long -16
  0x194: efffffff     | 	.long -17
  0x198: 12000000     | 	.long 18
  0x19c: edffffff     | 	.long -19
  0x1a0: 14000000     | 	.long 20
  0x1a4: ebffffff     | 	.long -21
  0x1a8: 16000000     | 	.long 22
  0x1ac: 17000000     | 	.long 23
  0x1b0: 18000000     | 	.long 24
  0x1b4: e7ffffff     | 	.long -25
  0x1b8: e6ffffff     | 	.long -26
  0x1bc: e5ffffff     | 	.long -27
  0x1c0: e4ffffff     | 	.long -28
  0x1c4: 1d000000     | 	.long 29
  0x1c8: 1e000000     | 	.long 30
  0x1cc: 1f000000     | 	.long 31
  0x1d0: 20000000     | 	.long 32
  0x1d4: dfffffff     | 	.long -33
  0x1d8: 22000000     | 	.long 34
  0x1dc: 23000000     | 	.long 35
  0x1e0: 24000000     | 	.long 36
  0x1e4: 25000000     | 	.long 37
  0x1e8: daffffff     | 	.long -38
  0x1ec: 27000000     | 	.long 39
  0x1f0: 28000000     | 	.long 40
  0x1f4: d7ffffff     | 	.long -41
  0x1f8: 2a000000     | 	.long 42
  0x1fc: d5ffffff     | 	.long -43
  0x200: 2c000000     | 	.long 44
  0x204: d3ffffff     | 	.long -45
  0x208: d2ffffff     | 	.long -46
  0x20c: 2f000000     | 	.long 47
  0x210: d0ffffff     | 	.long -48
  0x214: cfffffff     | 	.long -49
  0x218: ceffffff     | 	.long -50
  0x21c: cdffffff     | 	.long -51
  0x220: 34000000     | 	.long 52
  0x224: cbffffff     | 	.long -53
  0x228: 36000000     | 	.long 54
  0x22c: c9ffffff     | 	.long -55
  0x230: c8ffffff     | 	.long -56
  0x234: c7ffffff     | 	.long -57
  0x238: 3a000000     | 	.long 58
  0x23c: 3b000000     | 	.long 59
  0x240: c4ffffff     | 	.long -60
  0x244: 3d000000     | 	.long 61
  0x248: c2ffffff     | 	.long -62
  0x24c: c1ffffff     | 	.long -63
  0x250: fadebc00     | 	.long 0xbcdefa # This shouldn't get moved
=======
  0x090:              | 	.align 4
  0x090:              | src:
  0x090: ffffffff     | 	.long -1
  0x094: 02000000     | 	.long 2
  0x098: 03000000     | 	.long 3
  0x09c: 04000000     | 	.long 4
  0x0a0: 05000000     | 	.long 5
  0x0a4: faffffff     | 	.long -6
  0x0a8: 07000000     | 	.long 7
  0x0ac: f8ffffff     | 	.long -8
  0x0b0: f7ffffff     | 	.long -9
  0x0b4: f6ffffff     | 	.long -10
  0x0b8: 0b000000     | 	.long 11
  0x0bc: f4ffffff     | 	.long -12
  0x0c0: f3ffffff     | 	.long -13
  0x0c4: f2ffffff     | 	.long -14
  0x0c8: f1ffffff     | 	.long -15
  0x0cc: 10000000     | 	.long 16
  0x0d0: 11000000     | 	.long 17
  0x0d4: 12000000     | 	.long 18
  0x0d8: edffffff     | 	.long -19
  0x0dc: 14000000     | 	.long 20
  0x0e0: 15000000     | 	.long 21
  0x0e4: 16000000     | 	.long 22
  0x0e8: e9ffffff     | 	.long -23
  0x0ec: 18000000     | 	.long 24
  0x0f0: 19000000     | 	.long 25
  0x0f4: e6ffffff     | 	.long -26
  0x0f8: e5ffffff     | 	.long -27
  0x0fc: 1c000000     | 	.long 28
  0x100: 1d000000     | 	.long 29
  0x104: e2ffffff     | 	.long -30
  0x108: e1ffffff     | 	.long -31
  0x10c: e0ffffff     | 	.long -32
  0x110: 21000000     | 	.long 33
  0x114: 22000000     | 	.long 34
  0x118: 23000000     | 	.long 35
  0x11c: dcffffff     | 	.long -36
  0x120: dbffffff     | 	.long -37
  0x124: 26000000     | 	.long 38
  0x128: 27000000     | 	.long 39
  0x12c: d8ffffff     | 	.long -40
  0x130: d7ffffff     | 	.long -41
  0x134: 2a000000     | 	.long 42
  0x138: 2b000000     | 	.long 43
  0x13c: 2c000000     | 	.long 44
  0x140: 2d000000     | 	.long 45
  0x144: 2e000000     | 	.long 46
  0x148: 2f000000     | 	.long 47
  0x14c: d0ffffff     | 	.long -48
  0x150: cfffffff     | 	.long -49
  0x154: ceffffff     | 	.long -50
  0x158: 33000000     | 	.long 51
  0x15c: ccffffff     | 	.long -52
  0x160: cbffffff     | 	.long -53
  0x164: caffffff     | 	.long -54
  0x168: c9ffffff     | 	.long -55
  0x16c: 38000000     | 	.long 56
  0x170: c7ffffff     | 	.long -57
  0x174: c6ffffff     | 	.long -58
  0x178: 3b000000     | 	.long 59
  0x17c: c4ffffff     | 	.long -60
  0x180: 3d000000     | 	.long 61
  0x184: c2ffffff     | 	.long -62
  0x188: c1ffffff     | 	.long -63
  0x18c: fadebc00     | 	.long 0xbcdefa # This shouldn't get moved
>>>>>>> 88c86736547f5ef90cb46ec9534a0259e1303750
                      | 
  0x260:              | 	.align 16
  0x260:              | Predest:
  0x260: fadebc00     | 	.long 0xbcdefa
  0x264:              | dest:
  0x264: abefcd00     | 	.long 0xcdefab
  0x268: abefcd00     | 	.long 0xcdefab
  0x26c: abefcd00     | 	.long 0xcdefab
  0x270: abefcd00     | 	.long 0xcdefab
  0x274: abefcd00     | 	.long 0xcdefab
  0x278: abefcd00     | 	.long 0xcdefab
  0x27c: abefcd00     | 	.long 0xcdefab
  0x280: abefcd00     | 	.long 0xcdefab
  0x284: abefcd00     | 	.long 0xcdefab
  0x288: abefcd00     | 	.long 0xcdefab
  0x28c: abefcd00     | 	.long 0xcdefab
  0x290: abefcd00     | 	.long 0xcdefab
  0x294: abefcd00     | 	.long 0xcdefab
  0x298: abefcd00     | 	.long 0xcdefab
  0x29c: abefcd00     | 	.long 0xcdefab
  0x2a0: abefcd00     | 	.long 0xcdefab
  0x2a4: abefcd00     | 	.long 0xcdefab
  0x2a8: abefcd00     | 	.long 0xcdefab
  0x2ac: abefcd00     | 	.long 0xcdefab
  0x2b0: abefcd00     | 	.long 0xcdefab
  0x2b4: abefcd00     | 	.long 0xcdefab
  0x2b8: abefcd00     | 	.long 0xcdefab
  0x2bc: abefcd00     | 	.long 0xcdefab
  0x2c0: abefcd00     | 	.long 0xcdefab
  0x2c4: abefcd00     | 	.long 0xcdefab
  0x2c8: abefcd00     | 	.long 0xcdefab
  0x2cc: abefcd00     | 	.long 0xcdefab
  0x2d0: abefcd00     | 	.long 0xcdefab
  0x2d4: abefcd00     | 	.long 0xcdefab
  0x2d8: abefcd00     | 	.long 0xcdefab
  0x2dc: abefcd00     | 	.long 0xcdefab
  0x2e0: abefcd00     | 	.long 0xcdefab
  0x2e4: abefcd00     | 	.long 0xcdefab
  0x2e8: abefcd00     | 	.long 0xcdefab
  0x2ec: abefcd00     | 	.long 0xcdefab
  0x2f0: abefcd00     | 	.long 0xcdefab
  0x2f4: abefcd00     | 	.long 0xcdefab
  0x2f8: abefcd00     | 	.long 0xcdefab
  0x2fc: abefcd00     | 	.long 0xcdefab
  0x300: abefcd00     | 	.long 0xcdefab
  0x304: abefcd00     | 	.long 0xcdefab
  0x308: abefcd00     | 	.long 0xcdefab
  0x30c: abefcd00     | 	.long 0xcdefab
  0x310: abefcd00     | 	.long 0xcdefab
  0x314: abefcd00     | 	.long 0xcdefab
  0x318: abefcd00     | 	.long 0xcdefab
  0x31c: abefcd00     | 	.long 0xcdefab
  0x320: abefcd00     | 	.long 0xcdefab
  0x324: abefcd00     | 	.long 0xcdefab
  0x328: abefcd00     | 	.long 0xcdefab
  0x32c: abefcd00     | 	.long 0xcdefab
  0x330: abefcd00     | 	.long 0xcdefab
  0x334: abefcd00     | 	.long 0xcdefab
  0x338: abefcd00     | 	.long 0xcdefab
  0x33c: abefcd00     | 	.long 0xcdefab
  0x340: abefcd00     | 	.long 0xcdefab
  0x344: abefcd00     | 	.long 0xcdefab
  0x348: abefcd00     | 	.long 0xcdefab
  0x34c: abefcd00     | 	.long 0xcdefab
  0x350: abefcd00     | 	.long 0xcdefab
  0x354: abefcd00     | 	.long 0xcdefab
  0x358: abefcd00     | 	.long 0xcdefab
  0x35c: abefcd00     | 	.long 0xcdefab
  0x360:              | Postdest:
  0x360: bcfade00     | 	.long 0xdefabc
                      | 
  0x364:              | .align 4
                      | # Run time stack
  0x364: 00000000     | 	.long 0
  0x368: 00000000     | 	.long 0
  0x36c: 00000000     | 	.long 0
  0x370: 00000000     | 	.long 0
  0x374: 00000000     | 	.long 0
  0x378: 00000000     | 	.long 0
  0x37c: 00000000     | 	.long 0
  0x380: 00000000     | 	.long 0
  0x384: 00000000     | 	.long 0
  0x388: 00000000     | 	.long 0
  0x38c: 00000000     | 	.long 0
  0x390: 00000000     | 	.long 0
  0x394: 00000000     | 	.long 0
  0x398: 00000000     | 	.long 0
  0x39c: 00000000     | 	.long 0
  0x3a0: 00000000     | 	.long 0
                      | 
  0x3a4:              | Stack:
